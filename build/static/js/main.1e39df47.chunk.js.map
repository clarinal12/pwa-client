{"version":3,"sources":["apolloClient.ts","queries/me.ts","hooks/useAuth.tsx","queries/stores.ts","pages/Navigation/components/Stores/components/StoresList/StoresList.tsx","mutations/store.ts","components/StoreForm/addStoreSchema.ts","components/StoreForm/StoreForm.tsx","pages/Navigation/components/Stores/components/AddStore/AddStore.tsx","pages/Navigation/components/Stores/Stores.tsx","pages/Navigation/components/Accounts/Accounts.tsx","pages/Navigation/nav-list.ts","pages/Navigation/components/Main/Main.tsx","pages/Navigation/Navigation.tsx","mutations/authentication.ts","components/LoginForm/validationSchema.ts","components/LoginForm/LoginForm.tsx","pages/Login/Login.tsx","pages/Authentication/Authentication.tsx","App.tsx","AppWrapper.tsx","serviceWorker.ts","index.tsx"],"names":["getApolloClient","a","retryLink","RetryLink","attempts","max","Infinity","queueLink","QueueLink","tempHttpLink","HttpLink","authLink","setContext","_","headers","token","localStorage","getItem","authorization","httpLink","concat","window","addEventListener","close","open","serializingLink","SerializingLink","trackerLink","ApolloLink","operation","forward","undefined","context","getContext","trackedQueries","JSON","parse","tracked","operationName","query","variables","newTrackedQuery","setItem","stringify","map","data","link","from","cache","InMemoryCache","persistor","CachePersistor","storage","restore","purge","ApolloClient","ME","gql","AuthContext","createContext","useAuth","useContext","ProvideAuth","children","auth","client","useState","setToken","userDetails","setUserDetails","useQuery","onCompleted","response","me","notifyOnNetworkStatusChange","refetch","useEffect","userToken","setUserToken","newToken","signOut","Promise","resolve","clear","clearStore","useProvideAuth","Provider","value","STORES","StoresList","fetchPolicy","loading","error","listStore","edges","className","indeterminate","message","address","description","id","modifier","key","style","margin","ADD_STORE","addStoreSchema","yup","shape","required","StoreForm","onSuccess","initialValues","title","alert","toggleAlert","useMutation","res","onError","err","refetchQueries","addStore","formik","useFormik","onSubmit","values","validationSchema","enableReinitialize","handleSubmit","handleChange","onCancel","isOpen","isCancelable","onClick","float","onChange","placeholder","name","disabled","AddStore","navigator","handleSuccess","popPage","renderToolbar","Stores","renderFixed","position","pushPage","component","props","icon","size","Accounts","padding","defaultProps","tabSections","label","index","renderTabs","section","content","tab","Navigation","initialRoute","Main","renderPage","route","React","createElement","AUTH","loginSchema","username","password","LoginForm","result","login","type","Login","Authentication","App","AppWrapper","setClient","setLoading","then","newClient","setTimeout","promises","trackedQuery","mutate","mutation","optimisticResponse","all","console","log","execute","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1e39df47.chunk.js","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { CachePersistor } from 'apollo-cache-persist';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloLink } from 'apollo-link';\nimport QueueLink from 'apollo-link-queue';\nimport { RetryLink } from 'apollo-link-retry';\nimport SerializingLink from 'apollo-link-serialize';\nimport { setContext } from 'apollo-link-context';\nconst SCHEMA_VERSION = '1';\nconst SCHEMA_VERSION_KEY = 'apollo-schema-version';\n\nconst getApolloClient = async () => {\n  const retryLink = new RetryLink({ attempts: { max: Infinity } });\n  const queueLink = new QueueLink();\n  const tempHttpLink = new HttpLink();\n\n  const authLink = setContext((_, { headers }) => {\n    const token = localStorage.getItem('token');\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      },\n    };\n  });\n\n  const httpLink = authLink.concat(tempHttpLink);\n\n  window.addEventListener('offline', () => queueLink.close());\n  window.addEventListener('online', () => queueLink.open());\n\n  const serializingLink = new SerializingLink();\n\n  const trackerLink = new ApolloLink((operation, forward) => {\n    if (forward === undefined) return null;\n\n    const context = operation.getContext();\n    const trackedQueries =\n      JSON.parse(\n        (window.localStorage.getItem('trackedQueries') as any) || null\n      ) || [];\n\n    if (context.tracked !== undefined) {\n      const { operationName, query, variables } = operation;\n\n      const newTrackedQuery = {\n        query,\n        context,\n        variables,\n        operationName,\n      };\n\n      window.localStorage.setItem(\n        'trackedQueries',\n        JSON.stringify([...trackedQueries, newTrackedQuery])\n      );\n    }\n\n    return forward(operation).map((data) => {\n      if (context.tracked !== undefined) {\n        window.localStorage.setItem(\n          'trackedQueries',\n          JSON.stringify(trackedQueries)\n        );\n      }\n\n      return data;\n    });\n  });\n\n  const link = ApolloLink.from([\n    trackerLink,\n    queueLink,\n    serializingLink,\n    retryLink,\n    httpLink,\n  ]);\n\n  const cache = new InMemoryCache();\n\n  const persistor = new CachePersistor({\n    cache,\n    storage: window.localStorage as any,\n  });\n\n  const currentVersion = window.localStorage.getItem(SCHEMA_VERSION_KEY);\n\n  if (currentVersion === SCHEMA_VERSION) {\n    await persistor.restore();\n  } else {\n    await persistor.purge();\n    window.localStorage.setItem(SCHEMA_VERSION_KEY, SCHEMA_VERSION);\n  }\n\n  return new ApolloClient({ link, cache });\n};\n\nexport default getApolloClient;\n","import gql from 'graphql-tag';\n\nexport const ME = gql`\n  query getMe {\n    me {\n      id\n      firstName\n      lastName\n      email\n      role\n      username\n      active\n    }\n  }\n`;\n","import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useQuery } from 'react-apollo';\nimport { ME } from 'queries/me';\n\nconst AuthContext = createContext({});\n\nexport const useAuth = () => useContext(AuthContext);\n\nconst useProvideAuth = (client: any) => {\n  const [token, setToken] = useState(window.localStorage.getItem('token'));\n  const [userDetails, setUserDetails] = useState({});\n\n  const { data = {}, refetch } = useQuery(ME, {\n    onCompleted: (response: any) => {\n      setUserDetails(response.me);\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useEffect(() => {\n    if (data && data.me && token) {\n      setUserDetails(data.me);\n    }\n  }, [userDetails, data, token]);\n\n  const setUserToken = (newToken: string) => {\n    window.localStorage.setItem('token', newToken);\n    setToken(newToken);\n    refetch();\n  };\n\n  const signOut = () => {\n    return new Promise((resolve) => {\n      setToken(null);\n      setUserDetails({});\n      window.localStorage.clear();\n      client.clearStore();\n      resolve(true);\n    });\n  };\n\n  return {\n    userToken: token,\n    setUserToken,\n    userDetails,\n    signOut,\n  };\n};\n\ninterface IProvideAuthProps {\n  children: React.ReactNode;\n  client: any;\n}\n\nexport const ProvideAuth: React.FC<IProvideAuthProps> = ({\n  children,\n  client,\n}) => {\n  const auth = useProvideAuth(client);\n  return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n};\n","import gql from 'graphql-tag';\n\nexport const STORES = gql`\n  query ListStore {\n    listStore {\n      data {\n        id\n        description\n        address\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Card, ProgressCircular } from 'react-onsenui';\nimport { STORES } from 'queries/stores';\nimport { useQuery } from 'react-apollo';\nimport { IStore } from 'interfaces/stores';\n\nconst StoresList = () => {\n  const { data = {}, loading, error } = useQuery(STORES, {\n    fetchPolicy: 'network-only',\n  });\n\n  const { listStore = {} }: any = data;\n  const { data: edges = [] } = listStore;\n\n  return (\n    <div>\n      {loading && (\n        <div className=\"text-center py-3\">\n          <ProgressCircular indeterminate />\n        </div>\n      )}\n      {error && <div className=\"text-center py-3\">{error.message}</div>}\n      <div className=\"grid grid-cols-2 gap-3 p-3\">\n        {edges.map(({ address, description, id }: IStore) => (\n          <Card modifier=\"material\" key={id} style={{ margin: 0 }}>\n            <p className=\"text-2xl leading-tight\">{description}</p>\n            <p className=\"mt-3\">{address}</p>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default StoresList;\n","import gql from 'graphql-tag';\n\nexport const ADD_STORE = gql`\n  mutation AddStore($description: String!, $address: String!) {\n    addStore(description: $description, address: $address) {\n      id\n      description\n      address\n    }\n  }\n`;\n","import * as yup from 'yup';\n\nexport const addStoreSchema = () =>\n  yup.object().shape({\n    description: yup.string().required(),\n    address: yup.string().required(),\n  });\n","import React, { useState } from 'react';\nimport { Input, Button, AlertDialog } from 'react-onsenui';\nimport { useFormik } from 'formik';\nimport { ADD_STORE } from 'mutations/store';\nimport { useMutation } from '@apollo/react-hooks';\nimport { addStoreSchema } from './addStoreSchema';\nimport { STORES } from 'queries/stores';\n\ninterface IStoreFormProps {\n  onSuccess?: (response?: object) => void;\n  initialValues?: object;\n}\n\nconst StoreForm: React.FC<IStoreFormProps> = ({ onSuccess, initialValues }) => {\n  const [alert, toggleAlert] = useState({\n    open: false,\n    title: '',\n    message: '',\n  });\n\n  const [addStore, { loading }] = useMutation(ADD_STORE, {\n    onCompleted: (res) => {\n      onSuccess(res);\n    },\n    onError: (err) => {\n      const { message } = err;\n      toggleAlert({\n        open: true,\n        title: 'Add Store Error',\n        message,\n      });\n    },\n    refetchQueries: [{ query: STORES }],\n  });\n\n  const formik = useFormik({\n    initialValues: { description: '', address: '', ...initialValues },\n    onSubmit: (values) => {\n      const { description, address }: any = values;\n      addStore({\n        variables: { description, address },\n      });\n    },\n    validationSchema: addStoreSchema,\n    enableReinitialize: true,\n  });\n\n  const { handleSubmit, handleChange } = formik;\n\n  return (\n    <div>\n      {alert.open && (\n        <AlertDialog\n          onCancel={() => toggleAlert({ ...alert, open: false })}\n          isOpen\n          isCancelable\n          modifier=\"material\"\n        >\n          <div className=\"alert-dialog-title\">{alert.title}</div>\n          <div className=\"alert-dialog-content\">{alert.message}</div>\n          <div>\n            <Button\n              onClick={() => toggleAlert({ ...alert, open: false })}\n              className=\"alert-dialog-button\"\n            >\n              OK\n            </Button>\n          </div>\n        </AlertDialog>\n      )}\n      <form>\n        <Input\n          float\n          onChange={handleChange}\n          placeholder=\"Description\"\n          name=\"description\"\n          className=\"w-full mt-4\"\n          modifier=\"material\"\n        />\n        <Input\n          float\n          onChange={handleChange}\n          placeholder=\"Address\"\n          name=\"address\"\n          className=\"w-full mt-8\"\n          modifier=\"material\"\n        />\n        <div className=\"mt-6 w-full text-right\">\n          <Button\n            className=\"w-full text-center\"\n            disabled={loading}\n            onClick={() => handleSubmit()}\n          >\n            {loading ? 'Submitting...' : 'Submit'}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default StoreForm;\n","import React from 'react';\nimport { Page, Toolbar, BackButton } from 'react-onsenui';\nimport StoreForm from 'components/StoreForm';\n\ninterface IAddStoreProps {\n  navigator: any;\n}\n\nconst AddStore: React.FC<IAddStoreProps> = ({ navigator }) => {\n  const pop = () => {\n    navigator.popPage();\n  };\n\n  const handleSuccess = () => {\n    pop();\n  };\n\n  return (\n    <Page\n      renderToolbar={() => (\n        <Toolbar>\n          <div className=\"left\">\n            <BackButton />\n          </div>\n          <div className=\"center\">Add Store</div>\n        </Toolbar>\n      )}\n    >\n      <div className=\"content h-screen w-screen flex items-center justify-center\">\n        <StoreForm onSuccess={() => handleSuccess()} />\n      </div>\n    </Page>\n  );\n};\n\nexport default AddStore;\n","import React from 'react';\nimport { Page, Toolbar, Fab, Icon } from 'react-onsenui';\nimport StoreList from './components/StoresList';\nimport AddStore from './components/AddStore';\n\ninterface IStoreProps {\n  title: string;\n  navigator: any;\n}\n\nconst Stores: React.FC<IStoreProps> = ({ title, navigator }) => {\n  const pushToAddStore = () => {\n    navigator.pushPage({ component: AddStore, props: { key: 'add-store' } });\n  };\n\n  return (\n    <Page\n      renderToolbar={() => (\n        <Toolbar>\n          <div className=\"center\">{title}</div>\n        </Toolbar>\n      )}\n      renderFixed={() => (\n        <Fab\n          position=\"top right\"\n          modifier=\"mini\"\n          onClick={() => pushToAddStore()}\n        >\n          <div className=\"h-full w-full flex items-center justify-center\">\n            <Icon icon=\"fa-plus\" size={10} />\n          </div>\n        </Fab>\n      )}\n    >\n      <StoreList />\n    </Page>\n  );\n};\n\nexport default Stores;\n","import React from 'react';\nimport { string } from 'prop-types';\nimport { Page, Toolbar, Button } from 'react-onsenui';\nimport { useAuth } from 'hooks/useAuth';\n\ninterface IAccountsProps {\n  title: string;\n  navigator: any;\n}\n\nconst Accounts: React.FC<IAccountsProps> = ({ title, navigator }) => {\n  const { signOut }: any = useAuth();\n\n  return (\n    <Page\n      renderToolbar={() => (\n        <Toolbar>\n          <div className=\"center\">{title}</div>\n        </Toolbar>\n      )}\n    >\n      <div className=\"content\" style={{ padding: 20 }}>\n        <h1>Accounts Screen</h1>\n        <Button onClick={() => signOut()}>Logout</Button>\n      </div>\n    </Page>\n  );\n};\n\nAccounts.propTypes = {\n  title: string,\n};\n\nAccounts.defaultProps = {\n  title: '',\n};\n\nexport default Accounts;\n","import Stores from './components/Stores';\nimport Accounts from './components/Accounts';\n\nexport const tabSections = [\n  {\n    label: 'Stores',\n    component: Stores,\n    icon: 'md-home',\n  },\n  {\n    label: 'Accounts',\n    component: Accounts,\n    icon: 'md-accounts',\n  },\n];\n","import React from 'react';\nimport { Tab, Page, Tabbar } from 'react-onsenui';\nimport { tabSections } from '../../nav-list';\n\ninterface IStoresProps {\n  navigator: any;\n}\n\nconst Stores: React.FC<IStoresProps> = ({ navigator }) => {\n  const renderTabs = () => {\n    return tabSections.map((section, key) => {\n      return {\n        content: (\n          <section.component\n            key={key}\n            title={section.label}\n            navigator={navigator}\n          />\n        ),\n        tab: <Tab key={key} label={section.label} icon={section.icon} />,\n      };\n    });\n  };\n\n  return (\n    <Page>\n      <Tabbar index={0} renderTabs={() => renderTabs()} />\n    </Page>\n  );\n};\n\nexport default Stores;\n","import React from 'react';\nimport { Navigator } from 'react-onsenui';\nimport Main from './components/Main';\n\nconst Navigation = () => {\n  const renderPage = (route: any, navigator: any) => {\n    const props = route.props || {};\n\n    return React.createElement(route.component, { ...props, navigator });\n  };\n\n  return (\n    <Navigator\n      initialRoute={{ component: Main, props: { key: 'main' } }}\n      renderPage={(route, navigator) => renderPage(route, navigator)}\n    />\n  );\n};\n\nexport default Navigation;\n","import gql from 'graphql-tag';\n\nexport const AUTH = gql`\n  mutation Auth($username: String!, $password: String!) {\n    auth(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n","import * as yup from 'yup';\n\nexport const loginSchema = () =>\n  yup.object().shape({\n    username: yup.string().required(),\n    password: yup.string().required(),\n  });\n","import React, { useState } from 'react';\nimport { Input, Button, AlertDialog } from 'react-onsenui';\nimport { useFormik } from 'formik';\nimport { AUTH } from 'mutations/authentication';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useAuth } from 'hooks/useAuth';\nimport { loginSchema } from './validationSchema';\n\nconst LoginForm = () => {\n  const [alert, toggleAlert] = useState({\n    open: false,\n    title: '',\n    message: '',\n  });\n  const { setUserToken }: any = useAuth();\n  const [login, { loading }] = useMutation(AUTH, {\n    onCompleted: (result) => {\n      const { auth } = result;\n      setUserToken(auth.token);\n    },\n    onError: (err) => {\n      const { message } = err;\n      toggleAlert({\n        open: true,\n        title: 'Login Error',\n        message,\n      });\n    },\n  });\n\n  const formik = useFormik({\n    initialValues: { username: '', password: '' },\n    onSubmit: (values) => {\n      const { username, password } = values;\n      login({\n        variables: { username, password },\n      });\n    },\n    validationSchema: loginSchema,\n    enableReinitialize: true,\n  });\n\n  const { handleSubmit, handleChange } = formik;\n\n  return (\n    <div>\n      {alert.open && (\n        <AlertDialog\n          onCancel={() => toggleAlert({ ...alert, open: false })}\n          isOpen\n          isCancelable\n          modifier=\"material\"\n        >\n          <div className=\"alert-dialog-title\">{alert.title}</div>\n          <div className=\"alert-dialog-content\">{alert.message}</div>\n          <div>\n            <Button\n              onClick={() => toggleAlert({ ...alert, open: false })}\n              className=\"alert-dialog-button\"\n            >\n              OK\n            </Button>\n          </div>\n        </AlertDialog>\n      )}\n      <form className=\"p-10\">\n        <h1>Login</h1>\n        <Input\n          float\n          onChange={handleChange}\n          placeholder=\"Username\"\n          name=\"username\"\n          className=\"w-full mt-4\"\n          modifier=\"material\"\n        />\n        <Input\n          float\n          onChange={handleChange}\n          placeholder=\"Password\"\n          type=\"password\"\n          name=\"password\"\n          className=\"w-full mt-8\"\n          modifier=\"material\"\n        />\n        <div className=\"mt-6 w-full text-right\">\n          <Button\n            className=\"w-full text-center\"\n            disabled={loading}\n            onClick={() => handleSubmit()}\n          >\n            {loading ? 'Submitting...' : 'Submit'}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport { Page } from 'react-onsenui';\nimport LoginForm from 'components/LoginForm';\n\nconst Login = () => {\n  return (\n    <Page>\n      <div className=\"content h-screen w-screen flex items-center justify-center\">\n        <LoginForm />\n      </div>\n    </Page>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport { useAuth } from 'hooks/useAuth';\nimport Navigation from 'pages/Navigation';\nimport Login from 'pages/Login';\n\nconst Authentication = () => {\n  const { userToken }: any = useAuth();\n\n  if (userToken) return <Navigation />;\n\n  return <Login />;\n};\n\nexport default Authentication;\n","import React from 'react';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloProvider as ApolloHooksProvider } from '@apollo/react-hooks';\nimport { ProgressCircular } from 'react-onsenui';\nimport { ProvideAuth } from 'hooks/useAuth';\nimport 'onsenui/css/onsenui.css';\nimport 'styles/tailwind.css';\nimport 'styles/themes/default.css';\nimport Authentication from './pages/Authentication';\n\ninterface IAppProps {\n  client: any;\n  loading: boolean;\n}\n\nconst App: React.FC<IAppProps> = ({ client, loading }) => {\n  if (loading)\n    return (\n      <div className=\"h-screen w-screen flex items-center justify-center\">\n        <ProgressCircular indeterminate />\n      </div>\n    );\n\n  return (\n    <ApolloHooksProvider client={client}>\n      <ApolloProvider client={client}>\n        <ProvideAuth client={client}>\n          <Authentication />\n        </ProvideAuth>\n      </ApolloProvider>\n    </ApolloHooksProvider>\n  );\n};\n\nexport default App;\n","import React, { useEffect, useState } from 'react';\n\nimport getApolloClient from './apolloClient';\nimport App from './App';\n\nexport default function AppWrapper() {\n  const [client, setClient] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    getApolloClient().then((newClient) => {\n      setClient(newClient as any);\n      setTimeout(() => {\n        setLoading(false);\n      }, 1000);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!client) return;\n\n    const execute = async () => {\n      const trackedQueries =\n        JSON.parse(\n          (window.localStorage.getItem('trackedQueries') as any) || null\n        ) || [];\n\n      const promises = trackedQueries.map((trackedQuery: any) => {\n        const {\n          variables,\n          query,\n          context,\n          //  operationName\n        } = trackedQuery;\n        return client.mutate({\n          context,\n          variables,\n          mutation: query,\n          // update: updateFunctions[operationName],\n          optimisticResponse: context.optimisticResponse,\n        });\n      });\n\n      try {\n        await Promise.all(promises);\n      } catch (error) {\n        console.log({ error });\n      }\n\n      window.localStorage.setItem('trackedQueries', '');\n    };\n\n    execute();\n  }, [client]);\n\n  return <App client={client} loading={loading} />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppWrapper from './AppWrapper';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppWrapper />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}